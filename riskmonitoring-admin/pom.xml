<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>riskmonitoring</artifactId>
		<groupId>com.riskmonitoring</groupId>
		<version>4.1.0</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<packaging>jar</packaging>
	<artifactId>riskmonitoring-admin</artifactId>

	<description>
	    web服务入口
	</description>

	<dependencies>
		<!-- SpringBoot集成thymeleaf模板 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- spring-boot-devtools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional> <!-- 表示依赖不会传递 -->
		</dependency>

		<!-- swagger2 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
		</dependency>

		<!--防止进入swagger页面报类型转换错误，排除2.9.2中的引用，手动增加1.5.21版本 -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>1.5.21</version>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-models</artifactId>
			<version>1.5.21</version>
		</dependency>
		<!-- swagger2-UI -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
		</dependency>

		<!-- 核心模块 -->
		<dependency>
			<groupId>com.riskmonitoring</groupId>
			<artifactId>riskmonitoring-framework</artifactId>
		</dependency>

		<!-- 定时任务 -->
		<dependency>
			<groupId>com.riskmonitoring</groupId>
			<artifactId>riskmonitoring-quartz</artifactId>
		</dependency>

		<!-- 代码生成 -->
		<dependency>
			<groupId>com.riskmonitoring</groupId>
			<artifactId>riskmonitoring-generator</artifactId>
		</dependency>
		<!-- 业务模块 -->
		<dependency>
			<groupId>com.riskmonitoring</groupId>
			<artifactId>riskmonitoring-business</artifactId>
		</dependency>
		<!-- <dependency> <groupId>com.cloudera</groupId> <artifactId>ImpalaJDBC41</artifactId> 
			<version>2.5.41</version> </dependency> -->
		<!-- redis配置 -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- <dependency>  
            <groupId>org.apache.hive</groupId>  
            <artifactId>hive-jdbc</artifactId>  
            <version>1.2.1</version>  
        </dependency> -->
		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> 
			<exclusions> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> 
			</exclusion> </exclusions> </dependency> -->
	</dependencies>

	<build>
		<finalName>${project.artifactId}-${maven.build.timestamp}</finalName>
		<plugins>
			<!-- <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> 
				</plugin> -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>com.msyd.RiskMonitorApplication</mainClass>
					<includeSystemScope>true</includeSystemScope>
					<includes>
						<!-- 设置没有jar包 -->
						<include>
							<groupId>nothing</groupId>
							<artifactId>nothing</artifactId>
						</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>bundle</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>${basedir}/src/main/resources/assembly/assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<!-- 设置配置文件的编译位置，为了打包使用 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<!-- 将不区分环境的文件编译到config下，这里exclude的元素当前不参与编译。 -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>assembly/**</exclude>
					<exclude>bin/**</exclude>
					<exclude>cronolog/**</exclude>
					<exclude>Impaladruid.properties</exclude>
					<exclude>redis.properties</exclude>
					<exclude>application*.yml</exclude>
					<exclude>logback.xml</exclude>
				</excludes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<resource>
				<directory>../riskmonitoring-business/src/main/resources/</directory>
				<includes>
					<include>mapper/**/*Mapper.xml</include>
					<include>templates/**</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<resource>
				<directory>../riskmonitoring-monitor/src/main/resources/</directory>
				<includes>
					<include>mapper/**/*Mapper.xml</include>
					<include>templates/**</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<resource>
				<directory>../riskmonitoring-quartz/src/main/resources/</directory>
				<includes>
					<include>mapper/**/*Mapper.xml</include>
					<include>templates/**</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<resource>
				<directory>../riskmonitoring-system/src/main/resources/</directory>
				<includes>
					<include>mapper/**/*Mapper.xml</include>
					<include>templates/**</include>
				</includes>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
			<!-- 分环境配置文件编译到制定目录，注意这里的dev、test、pro目录相当于resources目录，分环境配置文件如果有目录，需要创建好 
				${project.build.directory} 项目构建目录，target目录 -->
			<resource>
				<directory>${profiles.active}</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/config</targetPath>
			</resource>
		</resources>
	</build>
	<profiles>
		<!-- 开发环境 -->
		<profile>
			<id>dev</id>
			<properties>
				<profiles.active>${profiles.dir}/dev</profiles.active>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<!-- 开发用，因为编译设置的配置文件都到了target下的config下，目的是为了打包使用，那么class下就没有配置文件了，那么本地其服务就报错了。在本地启动的时候加载的dev 
				的配置文件，以供开发使用 -->
			<build>
				<resources>
					<!-- 设置配置文件的编译位置，为了打包使用 -->
					<resource>
						<directory>src/main/java</directory>
						<includes>
							<include>**/*.xml</include>
							<include>**/*.properties</include>
						</includes>
					</resource>
					<!-- 将不区分环境的文件编译到config下，这里exclude的元素当前不参与编译。 -->
					<resource>
						<directory>src/main/resources</directory>
						<excludes>
							<exclude>assembly/**</exclude>
							<exclude>bin/**</exclude>
							<exclude>cronolog/**</exclude>
							<exclude>Impaladruid.properties</exclude>
							<exclude>redis.properties</exclude>
							<exclude>application*.yml</exclude>
							<exclude>logback.xml</exclude>
						</excludes>
					</resource>
					<resource>
						<directory>../riskmonitoring-business/src/main/resources/</directory>
						<includes>
							<include>mapper/**/*Mapper.xml</include>
							<include>templates/**</include>
						</includes>
					</resource>
					<resource>
						<directory>../riskmonitoring-monitor/src/main/resources/</directory>
						<includes>
							<include>mapper/**/*Mapper.xml</include>
							<include>templates/**</include>
						</includes>
					</resource>
					<resource>
						<directory>../riskmonitoring-quartz/src/main/resources/</directory>
						<includes>
							<include>mapper/**/*Mapper.xml</include>
							<include>templates/**</include>
						</includes>
					</resource>
					<resource>
						<directory>../riskmonitoring-system/src/main/resources/</directory>
						<includes>
							<include>mapper/**/*Mapper.xml</include>
							<include>templates/**</include>
						</includes>
					</resource>
					<!-- 分环境配置文件编译到制定目录，注意这里的dev、test、pro目录相当于resources目录，分环境配置文件如果有目录，需要创建好 
						${project.build.directory} 项目构建目录，target目录 -->
					<resource>
						<directory>${profiles.dir}/dev</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
			</build>
		</profile>
		<!-- 测试环境 -->
		<profile>
			<id>test</id>
			<properties>
				<profiles.active>${profiles.dir}/test</profiles.active>
			</properties>
		</profile>
		<!-- 线上环境 -->
		<profile>
			<id>pro</id>
			<properties>
				<profiles.active>${profiles.dir}/pro</profiles.active>
			</properties>
		</profile>
	</profiles>

</project>